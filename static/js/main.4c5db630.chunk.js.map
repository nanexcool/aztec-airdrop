{"version":3,"sources":["web3.jsx","App.jsx","serviceWorker.js","index.js","merkleTree.js"],"names":["ethers","require","errors","setLogLevel","window","eth","ethereum","providers","Web3Provider","getDefaultProvider","addresses","tree","MerkleTree","drop","Contract","ethP","chai","multi","App","state","chainId","value","connected","loaded","address","proof","included","rootHash","claimed","expires","days","done","sig","tx","res","getNetwork","a","async","setState","getAll","aggregate","interface","functions","totalSupply","encode","balanceOf","all","chaiSupply","chaiBalance","Math","floor","toString","Date","now","utils","formatEther","parseInt","stamp","toLocaleDateString","toLocaleTimeString","getDone","connect","enable","result","searchForAddress","console","log","doClaim","e","preventDefault","getHexProof","toLowerCase","p","d","getSigner","claim","wait","doClaimWithSig","s","digest","solidityKeccak256","signMessage","arrayify","claimWithSig","includes","handleChange","target","handleSubmit","bind","this","className","href","rel","onClick","substr","onSubmit","type","id","name","placeholder","onChange","readOnly","hash","status","style","wordBreak","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","keccak256","bufferToHex","elements","filter","el","map","sort","Buffer","compare","bufDedup","layers","getLayers","length","push","getNextLayer","reduce","layer","idx","arr","combinedHash","first","second","sortAndConcat","getRoot","bufIndexOf","Error","pairElement","getPairElement","getProof","bufArrToHexArr","pairIdx","isBuffer","i","equals","some","args","concat"],"mappings":"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","file":"static/js/main.4c5db630.chunk.js","sourcesContent":["const ethers = require('ethers')\nethers.errors.setLogLevel(\"error\")\nwindow.ethers = ethers\nconst eth = window.ethereum ? \n  new ethers.providers.Web3Provider(window.ethereum) : ethers.getDefaultProvider('homestead')\nwindow.eth = eth\nexport default eth\n","import React, { Component } from 'react';\nimport { ethers } from 'ethers'\nimport ethP from './web3'\nimport MerkleTree from './merkleTree.js'\n\nconst unixToDateTime = stamp => new Date(stamp * 1000).toLocaleDateString(\"en-US\") + \" \" + new Date(stamp * 1000).toLocaleTimeString(\"en-US\")\nconst shortAddress = a => `${a.substr(0, 6)}...${a.substr(-4)}`\nconst addresses = require('./addresses.json')\nconst tree = new MerkleTree(addresses)\nconst dropAddress = \"0x393892fDA0AbD5678D67498F3F94985b621a81E7\"\nconst drop = new ethers.Contract(dropAddress, require('./AztecChaiAirdrop.json'), ethP)\nconst chaiAddress = \"0x06AF07097C9Eeb7fD685c692751D5C66dB49c215\"\nconst chai = new ethers.Contract(chaiAddress, require('./Chai.json'), ethP)\nconst multicallAddress = \"0xeefBa1e63905eF1D7ACbA5a8513c70307C1cE441\"\nconst multi = new ethers.Contract(multicallAddress, require('./Multicall.json'), ethP)\nwindow.drop = drop\nwindow.chai = chai\nwindow.addresses = addresses\n\n\nclass App extends Component {\n  state = {\n    chainId: null,\n    value: \"\",\n    connected: false,\n    loaded: false,\n    address: null,\n    proof: null,\n    included: null,\n    rootHash: null,\n    claimed: null,\n    expires: null,\n    days: null,\n    done: null,\n    sig: null,\n    tx: null,\n    res: null,\n  }\n\n  constructor() {\n    super()\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  componentDidMount() {\n    this.getNetwork()\n  }\n\n  getNetwork = async () => {\n    const { chainId } = await ethP.getNetwork()\n    this.setState({\n      chainId\n    })\n    if (chainId === 1) {\n      this.getAll()\n    }\n  }\n\n  getAll = async () => {\n    const [blockNumber, all] = await multi.aggregate([\n      [chai.address, chai.interface.functions.totalSupply.encode([])],\n      [chai.address, chai.interface.functions.balanceOf.encode([drop.address])],\n      [drop.address, drop.interface.functions.rootHash.encode([])],\n      [drop.address, drop.interface.functions.expires.encode([])],\n      // [drop.address, drop.interface.functions.done.encode([window.ethereum.selectedAddress])],\n    ])\n\n    const [chaiSupply, chaiBalance, rootHash, expires, done] = all\n    const days = Math.floor((expires.toString() - Date.now() / 1000) / 60 / 60 / 24)\n    this.setState({\n      chaiSupply: ethers.utils.formatEther(chaiSupply),\n      chaiBalance: parseInt(ethers.utils.formatEther(chaiBalance), 0),\n      loaded: true,\n      rootHash,\n      expires: unixToDateTime(expires.toString()),\n      days,\n      // claimed: parseInt(ethers.utils.formatUnits(claimed, 0)),\n      // done: parseInt(ethers.utils.formatUnits(done, 0)),\n    })\n  }\n\n  getDone = async (address) => {\n    const done = await drop.done(address)\n    this.setState({ done })\n  }\n\n  connect = async () => {\n    try {\n      const result = await window.ethereum.enable()\n      this.setState({\n        value: result[0],\n        connected: true,\n      })\n      this.searchForAddress(result[0])\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  doClaim = async (e) => {\n    e.preventDefault()\n    console.log('claiming!')\n    const proof = tree.getHexProof(this.state.value.toLowerCase())\n    const p = new ethers.providers.Web3Provider(window.ethereum)\n    const d = drop.connect(p.getSigner())\n    const tx = await d.claim(proof)\n    this.setState({ tx })\n    const res = await tx.wait()\n    this.setState({ res, tx: null })\n    this.getAll()\n  }\n\n  doClaimWithSig = async (e) => {\n    e.preventDefault()\n    console.log('claiming by sig!')\n    const p = new ethers.providers.Web3Provider(window.ethereum)\n    const s = p.getSigner()\n    const d = drop.connect(s)\n    window.d = d\n    const digest = ethers.utils.solidityKeccak256(['address', 'bytes32'], ['0x1c983DfdB333E0f6f6caf3143fef6ff8220dB3F1', '0x20162f371d4318f677b2dc93bdda3d26c72856293a2885c2b204f212082f0a62'])\n    const sig = await s.signMessage(ethers.utils.arrayify(digest))\n    console.log(sig)\n    this.setState({ sig })\n    const proof = tree.getHexProof(this.state.value.toLowerCase())\n    const tx = await d.claimWithSig(proof, '0x1c983DfdB333E0f6f6caf3143fef6ff8220dB3F1', sig)\n    const res = await tx.wait()\n    this.getAll()\n  }\n\n  searchForAddress = async (address) => {\n    if (addresses.includes(address)) {\n      let claimed = await drop.done(address)\n      claimed = claimed.toString() === \"0\" ? false : true\n      const proof = tree.getHexProof(address)\n      this.setState({\n        address,\n        claimed,\n        proof,\n        included: true\n      })\n    } else {\n      this.setState({\n        included: false\n      })\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      value: e.target.value\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    const address = this.state.value.toLowerCase()\n    this.searchForAddress(address)\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <section className=\"section\">\n          <h1 className=\"title is-1\">Hi, I'm Mariano and I want to give you 1 Chai</h1>\n          <div className=\"columns\">\n            <div className=\"column\">\n              <p>\n                If you are one of the <strong>176 participants from over 30 countries</strong> that\n                took part in the <a href=\"https://www.aztecprotocol.com/ignition/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  AZTEC Ignition Ceremony</a>,\n          then I want to thank you by giving you 1 Chai! (\n                  <a href=\"https://chai.money/about\" target=\"_blank\" rel=\"noopener noreferrer\">Learn more about Chai</a>\n                )\n              </p>\n              <br />\n                <nav className=\"level is-mobile\">\n                  <div className=\"level-item has-text-centered\">\n                    <div>\n                      <p className=\"title is-size-2\">{this.state.chaiBalance ? 176 - this.state.chaiBalance : \"...\"}</p>\n                      <p className=\"heading is-size-5\">Chai Claimed</p>\n                    </div>\n                  </div>\n                  <div className=\"level-item has-text-centered\">\n                    <div>\n                      <p className=\"title is-size-2\">{this.state.days || \"...\"}</p>\n                      <p className=\"heading is-size-5\">Days Left</p>\n                    </div>\n                  </div>\n                </nav>\n            </div>\n            <div className=\"column\">\n              <div className=\"box\">\n                <nav className=\"level is-mobile\">\n                  {window.ethereum &&\n                    <button className=\"level-item button is-info\" onClick={this.connect}>\n                      {(this.state.address && this.state.connected) ? `Connected: ${shortAddress(this.state.address)}` : 'Connect Wallet'}\n                    </button>\n                  }\n                </nav>\n                {this.state.chainId === 1 ||\n                  <p>Please connect to Mainnet!</p>\n                }\n                <form onSubmit={this.handleSubmit}>\n                  <div className=\"field has-addons\">\n                    <div className=\"control is-expanded\">\n                      <input className=\"input\" type=\"text\" id=\"address\" name=\"address\" placeholder=\"Search for your address (0x...)\" value={this.state.value} onChange={this.handleChange} />\n                    </div>\n                    <div className=\"control\">\n                      <input className=\"button is-primary\" type=\"submit\" value=\"Search\" />\n                    </div>\n                  </div>\n                </form>\n                <br />\n                {(this.state.included && !this.state.claimed) &&\n                  <div>\n                    <p>Congrats! This address participated in the AZTEC Ignition Ceremony and is entitled to 1 Chai, courtesy of me :)</p>\n                    <nav className=\"level is-mobile\">\n                      <input className=\"level-item button is-primary\" onClick={this.doClaim} value=\"Claim 1 Chai!\" readOnly />\n                    </nav>\n                  </div>\n                }\n                {(this.state.included && this.state.claimed) &&\n                  <div>\n                    <p>You've already claimed your Chai. Enjoy! :D</p>\n                  </div>\n                }\n                {this.state.included === false &&\n                  <div>\n                    <p>Sorry, this address is not part of the AZTEC Ignition Ceremony :(</p>\n                  </div>\n                }\n                {\n                  this.state.tx &&\n                  <div>\n                    <p>\n                      On the way! <a href={`https://etherscan.io/tx/${this.state.tx.hash}`} target=\"_blank\" rel=\"noopener noreferrer\">Follow on Etherscan</a>\n                    </p>\n                  </div>\n                }\n                {this.state.res && this.state.res.status === 1 &&\n                  <div>\n                    <p>\n                      Done! Enjoy your Chai ;)\n                    </p>\n                  </div>\n                }\n                <p className=\"is-hidden\">\n                  <input className=\"button is-primary\" onClick={this.doClaimWithSig} value=\"Claim 1 Chai with signature!\" readOnly />\n                </p>\n              </div>\n            </div>\n          </div>\n        </section>\n        <section className=\"section\">\n          <div className=\"columns\">\n            <div className=\"column\">\n              <h3 className=\"is-size-3\">How does it work?</h3>\n              <p>\n                AZTEC provides a <a href=\"https://github.com/AztecProtocol/ignition-verification#list-of-participants\">list of participants</a> that\n                succesfully completed the process. I created a Merkle Tree with these addresses. The smart contract only stores a\n                Merkle Root of the tree. You send a proof stating your address is in there, and the smart contract double\n                checks and sends you 1 Chai.\n              </p>\n              <p>\n                Smart contract: <a href=\"https://etherscan.io/address/0x393892fDA0AbD5678D67498F3F94985b621a81E7\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  0x393892fDA0AbD5678D67498F3F94985b621a81E7</a>\n              </p>\n              {this.state.loaded ?\n                <p style={{ wordBreak: 'break-word' }}>Root Hash: {this.state.rootHash}</p> :\n                <p>Loading</p>\n              }\n\n              <section className=\"section\">\n                <p className=\"subtitle\"><strong>Disclaimer!</strong> This project was built over one weekend. While the worst that can happen is that I lose {this.state.chaiBalance || 'some'} Chai, I thought it was worth mentioning. There's no audit or anything of the sort.</p>\n              </section>\n            </div>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const { keccak256, bufferToHex } = require('ethereumjs-util');\n\nclass MerkleTree {\n  constructor (elements) {\n    // Filter empty strings and hash elements\n    this.elements = elements.filter(el => el).map(el => keccak256(el));\n\n    // Sort elements\n    this.elements.sort(Buffer.compare);\n    // Deduplicate elements\n    this.elements = this.bufDedup(this.elements); // \n\n    // Create layers\n    this.layers = this.getLayers(this.elements);\n  }\n\n  getLayers (elements) {\n    if (elements.length === 0) {\n      return [['']];\n    }\n\n    const layers = [];\n    layers.push(elements);\n\n    // Get next layer until we reach the root\n    while (layers[layers.length - 1].length > 1) {\n      layers.push(this.getNextLayer(layers[layers.length - 1]));\n    }\n\n    return layers;\n  }\n\n  getNextLayer (elements) {\n    return elements.reduce((layer, el, idx, arr) => {\n      if (idx % 2 === 0) {\n        // Hash the current element with its pair element\n        layer.push(this.combinedHash(el, arr[idx + 1]));\n      }\n\n      return layer;\n    }, []);\n  }\n\n  combinedHash (first, second) {\n    if (!first) { return second; }\n    if (!second) { return first; }\n\n    return keccak256(this.sortAndConcat(first, second));\n  }\n\n  getRoot () {\n    return this.layers[this.layers.length - 1][0];\n  }\n\n  getHexRoot () {\n    return bufferToHex(this.getRoot());\n  }\n\n  getProof (el) {\n    let idx = this.bufIndexOf(el, this.elements);\n\n    if (idx === -1) {\n      throw new Error('Element does not exist in Merkle tree');\n    }\n\n    return this.layers.reduce((proof, layer) => {\n      const pairElement = this.getPairElement(idx, layer);\n\n      if (pairElement) {\n        proof.push(pairElement);\n      }\n\n      idx = Math.floor(idx / 2);\n\n      return proof;\n    }, []);\n  }\n\n  getHexProof (el) {\n    const proof = this.getProof(el);\n\n    return this.bufArrToHexArr(proof);\n  }\n\n  getPairElement (idx, layer) {\n    const pairIdx = idx % 2 === 0 ? idx + 1 : idx - 1;\n\n    if (pairIdx < layer.length) {\n      return layer[pairIdx];\n    } else {\n      return null;\n    }\n  }\n\n  bufIndexOf (el, arr) {\n    let hash;\n\n    // Convert element to 32 byte hash if it is not one already\n    if (el.length !== 32 || !Buffer.isBuffer(el)) {\n      hash = keccak256(el);\n    } else {\n      hash = el;\n    }\n\n    for (let i = 0; i < arr.length; i++) {\n      if (hash.equals(arr[i])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  bufDedup (elements) {\n    return elements.filter((el, idx) => {\n      return idx === 0 || !elements[idx - 1].equals(el);\n    });\n  }\n\n  bufArrToHexArr (arr) {\n    if (arr.some(el => !Buffer.isBuffer(el))) {\n      throw new Error('Array is not an array of buffers');\n    }\n\n    return arr.map(el => '0x' + el.toString('hex'));\n  }\n\n  sortAndConcat (...args) {\n    return Buffer.concat([...args].sort(Buffer.compare));\n  }\n}\n\nexport default MerkleTree\n"],"sourceRoot":""}